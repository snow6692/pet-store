// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum CategoryStatus {
  ACTIVE
  INACTIVE
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  role          UserRole  @default(USER)
  name          String?
  emailVerified DateTime?
  image         String?
  phone         String?
  address       String?
  city          String?
  state         String?
  postalCode    String?
  country       String?

  sessions  Session[]
  accounts  Account[]
  Cart      Cart?
  Wishlist  Wishlist[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Order     Order[]
  Rating    Rating[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model category {
  id    String @id @default(uuid())
  name  String @unique
  image String

  //Relations

  status   CategoryStatus @default(ACTIVE)
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
}

model Product {
  id     String   @id @default(uuid())
  name   String
  slug   String   @unique
  images String[]

  price       Float
  description String?
  quantity    Int           @default(1)
  status      ProductStatus @default(ACTIVE)
  discount    Float?
  rating      Float         @default(0.0)
  brand       String?
  isFeatured  Boolean       @default(false)
  categoryId  String

  //Relations
  category category   @relation(fields: [categoryId], references: [id])
  CartItem CartItem[]

  ratings Rating[]

  Wishlist     Wishlist[]
  WishlistItem WishlistItem[]
  OrderItem    OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@index([slug])
  @@index([status])
}

model Rating {
  id      String  @id @default(uuid())
  comment String?
  rating  Float   @default(1)

  product   Product @relation(fields: [productId], references: [id])
  productId String

  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId])
}

model Cart {
  id     String @id @default(uuid())
  userId String @unique

  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  //relations
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String @id @default(uuid())
  cartId    String
  productId String
  quantity  Int    @default(1)
  //relations

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // That product can't be added to the same cart twice
  @@unique([cartId, productId])
}

model Wishlist {
  id        String         @id @default(cuid())
  userId    String         @unique
  user      User           @relation(fields: [userId], references: [id])
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())
  Product   Product?       @relation(fields: [productId], references: [id])
  productId String?
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlistId String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([wishlistId, productId]) //   Can't add the product twice 
}

model Order {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  items         OrderItem[]
  totalPrice    Float
  status        OrderStatus    @default(PENDING)
  paymentMethod PaymentMethod?
  name          String
  email         String
  phone         String
  address       String
  city          String
  state         String
  country       String
  postalCode    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model OrderItem {
  id      String @id @default(uuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)
  price     Float

  createdAt DateTime @default(now())

  @@index([orderId])
  @@index([productId])
}

enum OrderStatus {
  PENDING
  ON_WAY
  DELIVERED
  CANCELED
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  VISA
}
